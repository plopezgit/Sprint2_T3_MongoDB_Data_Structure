db.createCollection ('address', {
	validator: {
		$jsonSchema: {
			bsonType: "object",
			required: ["street", "number", "floor", "door", "city", "postal_code", "country"],
			properties: {
				street: {
					bsonType: "string",
					description: "type string, it is required, and stores the provider street",
				},
				number: {
					bsonType: "int",
					description: "type int, it is required, and stores the provider street number",
				},
				floor: {
					bsonType: "int",
					description: "type int, it is required, and stores the provider floor number",
				},
				door: {
					bsonType: "int",
					description: "type int, it is required, and stores the provider door number",
				},
				city: {
					bsonType: "string",
					description: "type string, it is required, and stores the provider city",
				},
				postal_code: {
					bsonType: "string",
					description: "type string, it is required, and stores the provider postal code",
				},
				country: {
					bsonType: "string",
					description: "type string, it is required, and stores the provider country",
				},
			},
		},
	},
})

db.address.insertOne({
	street: "LLulis",
	number: 1,
	floor: 2,
	door: 3,
	city: "Clop",
	postal_code: "076434",
	country: "Cris"
});

db.createCollection('client', {
	validator: {
		$jsonSchema: {
			bsonType: "object",
			required: ["name", "_id_address", "phone", "email", "signup_timestamp"],
			properties: {
				name: {
					bsonType: "string",
					description: "type string, it is required, and store the client name",
				},
				_id_address: {
					bsonType: "objectId",
					description: "type objectId, it is requires, and store corelated client address Id",
				},
				phone: {
					bsonType: "string",
					description: "type string, it is required, and stores the client phone number",
				},
				email: {
					bsonType: "string",
					description: "type string, it is required, and stores the client email",
				},
				_id_client_referer: {
					bsonType: "objectId",
					description: "type objectId, it is requires, and store corelated client referer Id",
				},
				signup_timestamp: {
					bsonType: "timestamp",
					description: "type timestamp, it is required, and store the client signup timestamp",					
				},
			},
		},
	},
})

db.client.insertMany([{
	name: "Ryal",
	_id_address: ObjectId("65390bce39f21524d94710bd"),
	phone: "64732462",
	email: "ryal@tt.com",
	signup_timestamp: new Timestamp(),
},
{
	name: "Coral",
	_id_address: ObjectId("65390bce39f21524d94710bd"),
	phone: "64732462",
	email: "coral@tt.com",
	signup_timestamp: new Timestamp(),
}	
])

db.client.updateOne({
name: "Ryal"}, 
{$set: {_id_client_referer: ObjectId("6539175e39f21524d94710c8")}})

db.client.updateOne({
name: "Coral"}, 
{$set: {_id_client_referer: ObjectId("6539175e39f21524d94710c7")}})

db.createCollection('sale', {
	validator: {
		$jsonSchema: {
			bsonType: "object",
			required: ["_id_productList", "_id_vendor", "_id_client", "invoice_number", "timestamp"],
			properties: {
				_id_productList: {
					bsonType: "array",
					description: "type array, it is required, and store the product id list",
					items: {
						bsonType: "object",
						required: ["_id_product"],
						properties: {
							_id_product: {
								bsonType: "objectId",
								description: "type objectId, it is required, and store the product id",
							},
						},
					},
				},
				_id_vendor: {
					bsonType: "int",
					description: "type int, it is required, and store the vendor id",
					
				},
				_id_client: {
					bsonType: "objectId",
					description: "type objectId, it is required, and store the client id",
					
				},
				invoice_number: {
					bsonType: "int",
					description: "type int, it is required, and store the invoice number",
					
				},
				timestamp: {
					bsonType: "timestamp",
					description: "type int, it is required, and store the invoice number",					
				},
			},
		},
	},
})

db.sale.insertOne({
	_id_productList: [{
		_id_product: ObjectId("65391ba239f21524d94710cb"),
	}],
	_id_vendor: 34,
	_id_client: ObjectId("6539175e39f21524d94710c7"),
	invoice_number: 1,
	timestamp: new Timestamp(),
})

db.createCollection('glasses', {
	validator: {
		$jsonSchema: {
			bsonType: "object",
			required: ["_id_brand", "product_graduation_l", "product_graduation_r", "product_material", "product_price"],
			properties: {
				_id_brand: {
					bsonType: "objectId",
					description: "type objectId, it is required, and store the product brand id",
					
				},
				product_graduation_l: {
					bsonType: "decimal",
					description: "type float, it is required, and store the product graduation",
					
				},
				product_graduation_r: {
					bsonType: "decimal",
					description: "type float, it is required, and store the product graduation",
					
				},
				product_material: {
					bsonType: "string",
					description: "type string, it is required, and store the product material",
					
				},
				product_price: {
					bsonType: "decimal",
					description: "type float, it is required, and store the product material",
					
				},
			},
		},
	},
})

db.glasses.insertOne({
	_id_brand: ObjectId("6539128839f21524d94710c2"),
	product_graduation_l: Decimal128("1.5"),
	product_graduation_r: Decimal128("1.0"),
	product_material: "Plastic",
	product_price: Decimal128("453.00"),
});

db.createCollection('brand', {
	validator: {
		$jsonSchema: {
			bsonType: "object",
			required: ["brand_name", "_id_provider"],
			properties: {
				brand_name: {
					bsonType: "string",
					description: "type string, it is required, and store the brand name",
				},
				_id_provider: {
					bsonType: "objectId",
					description: "type objectId, it is requires, and store corelated brand provider Id",
				},
			},
		},
	},
})

db.brand.insertOne({
	brand_name: "Giorgio Arm",
	_id_provider: ObjectId("6539117e39f21524d94710c0"),
	
});

db.createCollection('provider', {
	validator: {
		$jsonSchema: {
			bsonType: "object",
			required: ["name", "address", "phone", "fax", "nif"],
			properties: {
				name: {
					bsonType: "string",
					description: "type string, it is required, and stores the name of the provider",
				},
				address: {
					bsonType: "objectId",
					description: "type objectId, it is required, and stores the provider address id",
				},
				phone: {
					bsonType: "string",
					description: "type string, it is required, and stores the provider phone number",
				},
				fax: {
					bsonType: "string",
					description: "type string, it is required, and stores the provider fax number",
				},
				nif: {
					bsonType: "string",
					description: "type string, it is required, and stores the provider nif",
				},
			},
		},
	},
})

db.provider.insertOne({
	name: "Giorgio Arm",
	address: ObjectId("65390bce39f21524d94710bd"),
	phone: "657474632",
	fax: "657453621",
	nif: "T764372654L"	
});